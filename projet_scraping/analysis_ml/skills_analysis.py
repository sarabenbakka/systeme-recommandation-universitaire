import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from collections import Counter
import re

def load_data_with_skills():
    """Charge les donn√©es avec les comp√©tences g√©n√©r√©es"""
    try:
        # Essayer d'abord de charger les donn√©es enrichies avec comp√©tences
        path = r"C:\Users\ThinkPad\OneDrive\Desktop\Master Big Data\S1 MASTER\BASE DE DONNEES ORACLE\PROJECTS\projet_scraping\projet_scraping\output\final_jobs_data_with_skills.csv"
        df = pd.read_csv(path)
        if 'Competences' not in df.columns:
            raise FileNotFoundError("Le fichier existe mais ne contient pas de comp√©tences")
    except FileNotFoundError:
        # Si le fichier n'existe pas, g√©n√©rer les comp√©tences
        print("G√©n√©ration des comp√©tences en cours...")
        from skills_generator import SkillsGenerator
        
        # Charger les donn√©es originales
        path_orig = r"C:\Users\ThinkPad\OneDrive\Desktop\Master Big Data\S1 MASTER\BASE DE DONNEES ORACLE\PROJECTS\projet_scraping\projet_scraping\output\final_jobs_data_cleaned.csv"
        df = pd.read_csv(path_orig)
        
        # G√©n√©rer les comp√©tences
        skills_gen = SkillsGenerator()
        df = skills_gen.enrich_dataframe(df)
        
        # Sauvegarder pour utilisation future
        df.to_csv(path, index=False)
        print("Comp√©tences g√©n√©r√©es et sauvegard√©es.")
    
    return df

def extract_skills_from_df(df):
    """Extrait toutes les comp√©tences du DataFrame et compte leur fr√©quence"""
    all_skills = []
    
    for skills_str in df['Competences'].dropna():
        # Diviser la cha√Æne de comp√©tences et nettoyer
        skills = [skill.strip() for skill in skills_str.split(',')]
        all_skills.extend(skills)
    
    # Compter les occurrences
    skills_counter = Counter(all_skills)
    
    return skills_counter

def skills_by_sector(df):
    """Analyse les comp√©tences les plus demand√©es par secteur"""
    sectors = df['Secteur'].unique()
    sector_skills = {}
    
    for sector in sectors:
        sector_df = df[df['Secteur'] == sector]
        sector_skills[sector] = extract_skills_from_df(sector_df)
    
    return sector_skills

def skills_by_experience(df):
    """Analyse les comp√©tences en fonction du niveau d'exp√©rience"""
    # Convertir l'exp√©rience en cat√©gories
    df['Experience_Cat'] = pd.cut(
        pd.to_numeric(df['Experience'], errors='coerce'),
        bins=[0, 2, 5, 10, 100],
        labels=['Junior (0-2 ans)', 'Interm√©diaire (3-5 ans)', 'Senior (6-10 ans)', 'Expert (10+ ans)']
    )
    
    exp_categories = df['Experience_Cat'].dropna().unique()
    exp_skills = {}
    
    for exp_cat in exp_categories:
        exp_df = df[df['Experience_Cat'] == exp_cat]
        exp_skills[exp_cat] = extract_skills_from_df(exp_df)
    
    return exp_skills

def skills_evolution(df):
    """Analyse l'√©volution des comp√©tences au fil du temps"""
    df['Annee'] = pd.to_datetime(df['Date_De_Publication'], errors='coerce').dt.year
    years = sorted(df['Annee'].dropna().unique())
    
    year_skills = {}
    for year in years:
        year_df = df[df['Annee'] == year]
        year_skills[year] = extract_skills_from_df(year_df)
    
    return year_skills

def run_skills_analysis():
    """Ex√©cute l'analyse des comp√©tences et affiche les r√©sultats dans Streamlit"""
    st.title("üîç Analyse des Comp√©tences Techniques")
    
    # Charger les donn√©es
    df = load_data_with_skills()
    
    # Extraire toutes les comp√©tences
    all_skills_counter = extract_skills_from_df(df)
    
    # Afficher les comp√©tences les plus demand√©es
    st.header("üìä Comp√©tences les plus demand√©es")
    
    # Nombre de comp√©tences √† afficher
    top_n = st.slider("Nombre de comp√©tences √† afficher:", 5, 30, 15)
    
    # Cr√©er un DataFrame pour les comp√©tences les plus demand√©es
    top_skills = pd.DataFrame({
        'Comp√©tence': [skill for skill, _ in all_skills_counter.most_common(top_n)],
        'Nombre d\'offres': [count for _, count in all_skills_counter.most_common(top_n)]
    })
    
    # Afficher le graphique
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(data=top_skills, x='Nombre d\'offres', y='Comp√©tence', palette='viridis', ax=ax)
    ax.set_title(f"Top {top_n} des comp√©tences les plus demand√©es")
    st.pyplot(fig)
    
    # Analyse par secteur
    st.header("üè¢ Comp√©tences par secteur")
    
    sector_skills = skills_by_sector(df)
    selected_sector = st.selectbox("Choisir un secteur:", sorted(sector_skills.keys()))
    
    if selected_sector:
        top_sector_skills = pd.DataFrame({
            'Comp√©tence': [skill for skill, _ in sector_skills[selected_sector].most_common(10)],
            'Nombre d\'offres': [count for _, count in sector_skills[selected_sector].most_common(10)]
        })
        
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        sns.barplot(data=top_sector_skills, x='Nombre d\'offres', y='Comp√©tence', palette='magma', ax=ax2)
        ax2.set_title(f"Top 10 des comp√©tences pour le secteur: {selected_sector}")
        st.pyplot(fig2)
    
    # Analyse par niveau d'exp√©rience
    st.header("üë®‚Äçüíº Comp√©tences par niveau d'exp√©rience")
    
    exp_skills = skills_by_experience(df)
    selected_exp = st.selectbox("Choisir un niveau d'exp√©rience:", sorted(exp_skills.keys()))
    
    if selected_exp:
        top_exp_skills = pd.DataFrame({
            'Comp√©tence': [skill for skill, _ in exp_skills[selected_exp].most_common(10)],
            'Nombre d\'offres': [count for _, count in exp_skills[selected_exp].most_common(10)]
        })
        
        fig3, ax3 = plt.subplots(figsize=(10, 6))
        sns.barplot(data=top_exp_skills, x='Nombre d\'offres', y='Comp√©tence', palette='rocket', ax=ax3)
        ax3.set_title(f"Top 10 des comp√©tences pour le niveau: {selected_exp}")
        st.pyplot(fig3)
    
    # √âvolution des comp√©tences au fil du temps
    st.header("üìà √âvolution des comp√©tences")
    
    year_skills = skills_evolution(df)
    years = sorted(year_skills.keys())
    
    if len(years) > 1:
        # S√©lectionner les comp√©tences √† suivre (top 5 de l'ann√©e la plus r√©cente)
        latest_year = max(years)
        skills_to_track = [skill for skill, _ in year_skills[latest_year].most_common(5)]
        
        # Cr√©er un DataFrame pour l'√©volution
        evolution_data = []
        for year in years:
            for skill in skills_to_track:
                evolution_data.append({
                    'Ann√©e': year,
                    'Comp√©tence': skill,
                    'Nombre d\'offres': year_skills[year].get(skill, 0)
                })
        
        evolution_df = pd.DataFrame(evolution_data)
        
        fig4, ax4 = plt.subplots(figsize=(10, 6))
        sns.lineplot(data=evolution_df, x='Ann√©e', y='Nombre d\'offres', hue='Comp√©tence', marker='o', ax=ax4)
        ax4.set_title("√âvolution des comp√©tences les plus demand√©es")
        st.pyplot(fig4)
    else:
        st.info("Pas assez de donn√©es temporelles pour analyser l'√©volution des comp√©tences.")
    
    # Recommandations pour les fili√®res universitaires
    st.header("üéì Recommandations pour les fili√®res universitaires")
    
    # Regrouper les comp√©tences par domaine
    domains = {
        'Data Science': ['Python', 'R', 'Machine Learning', 'Deep Learning', 'Statistical Analysis', 'Data Mining'],
        'D√©veloppement Web': ['JavaScript', 'HTML', 'CSS', 'React', 'Angular', 'Node.js', 'PHP'],
        'D√©veloppement Logiciel': ['Java', 'C#', 'C++', 'OOP', 'Design Patterns', 'Microservices'],
        'Cloud Computing': ['AWS', 'Azure', 'GCP', 'Docker', 'Kubernetes', 'Terraform'],
        'Cybers√©curit√©': ['Network Security', 'Penetration Testing', 'SIEM', 'Cryptography', 'Security+'],
        'Business Intelligence': ['SQL', 'Tableau', 'Power BI', 'ETL', 'Data Visualization', 'Excel'],
        'Finance': ['Financial Modeling', 'Financial Analysis', 'Accounting', 'Risk Management']
    }
    
    # Calculer le score pour chaque domaine
    domain_scores = {}
    for domain, skills in domains.items():
        score = sum(all_skills_counter.get(skill, 0) for skill in skills)
        domain_scores[domain] = score
    
    # Cr√©er un DataFrame pour les scores des domaines
    domain_df = pd.DataFrame({
        'Domaine': list(domain_scores.keys()),
        'Score': list(domain_scores.values())
    }).sort_values('Score', ascending=False)
    
    fig5, ax5 = plt.subplots(figsize=(10, 6))
    sns.barplot(data=domain_df, x='Score', y='Domaine', palette='viridis', ax=ax5)
    ax5.set_title("Recommandations de fili√®res universitaires bas√©es sur la demande du march√©")
    st.pyplot(fig5)
    
    # Afficher les recommandations textuelles
    st.subheader("Recommandations sp√©cifiques:")
    
    top_domains = domain_df.head(3)['Domaine'].tolist()
    for i, domain in enumerate(top_domains):
        st.markdown(f"**{i+1}. {domain}**")
        
        # Modules recommand√©s pour chaque domaine
        if domain == 'Data Science':
            st.markdown("""
            - **Modules recommand√©s**: 
                - Fondamentaux de la Data Science
                - Programmation Python pour l'analyse de donn√©es
                - Machine Learning et Deep Learning
                - Statistiques avanc√©es
                - Visualisation de donn√©es
            """)
        elif domain == 'D√©veloppement Web':
            st.markdown("""
            - **Modules recommand√©s**: 
                - D√©veloppement Front-end (HTML/CSS/JavaScript)
                - Frameworks modernes (React, Angular)
                - D√©veloppement Back-end (Node.js, Django)
                - Architecture web et API
                - UX/UI Design
            """)
        elif domain == 'Cloud Computing':
            st.markdown("""
            - **Modules recommand√©s**: 
                - Fondamentaux du Cloud Computing
                - Services AWS/Azure/GCP
                - Conteneurisation et orchestration (Docker, Kubernetes)
                - Infrastructure as Code
                - DevOps et CI/CD
            """)
        elif domain == 'Cybers√©curit√©':
            st.markdown("""
            - **Modules recommand√©s**: 
                - Fondamentaux de la cybers√©curit√©
                - S√©curit√© des r√©seaux
                - Cryptographie appliqu√©e
                - Analyse des vuln√©rabilit√©s
                - R√©ponse aux incidents
            """)
        elif domain == 'Business Intelligence':
            st.markdown("""
            - **Modules recommand√©s**: 
                - Conception de Data Warehouse
                - Outils de BI (Tableau, Power BI)
                - SQL avanc√©
                - ETL et int√©gration de donn√©es
                - Analyse d√©cisionnelle
            """)
        elif domain == 'D√©veloppement Logiciel':
            st.markdown("""
            - **Modules recommand√©s**: 
                - Programmation orient√©e objet
                - Architecture logicielle
                - Design patterns
                - Tests et qualit√© logicielle
                - D√©veloppement Agile
            """)
        elif domain == 'Finance':
            st.markdown("""
            - **Modules recommand√©s**: 
                - Finance quantitative
                - Analyse financi√®re
                - Gestion des risques
                - Technologies financi√®res (FinTech)
                - Mod√©lisation financi√®re
            """)

if __name__ == "__main__":
    run_skills_analysis()
